/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(miniLeng)

import java.io.*;

public class miniLeng
{
  
  public static void main(String args []) throws ParseException
  {
    BufferedReader new_buffer = new BufferedReader(new InputStreamReader(System.in));
	  String file;
	  miniLeng parser;
	  System.out.println("Ruta y nombre del fichero:");
	  /*
	  try
	  {
	    file=new_buffer.readLine();
	  }catch(IOException e) {
	    System.out.println("Error al leer la cadena");
	    return;
	  }
	 */
	  file = "/Users/heru/Documents/GitHub/programas/pruebas.ml";

	  System.out.println(file);
	  try
	  {
	    parser = new miniLeng(new FileInputStream(file));
	  }catch(FileNotFoundException e) {
	    System.out.println("Fallo al leer el fichero");
	    return;
	  }
	  try
	  {
	    parser.programa();
	  }
	  catch (Exception e)
	  {
	    System.out.println("NOK.");
	    System.out.println(e.getMessage());
	    miniLeng.ReInit(System.in);
	  }
	  catch (Error e)
	  {
	    System.out.println("Oops.");
	    System.out.println(e.getMessage());
	  }
  }
}

PARSER_END(miniLeng)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "%" : COMMENT 
}

< COMMENT > SKIP :
{
  "\n" : DEFAULT
}

<COMMENT> MORE : {
	<~[]>
}

TOKEN : /*  Reservadas */
{
	< tPROGRAMA : "programa" > { System.out.println("tPROGRAMA reconocido"); }
| 	< tVAR : "var" >
| 	< tAND: "and" >
| 	< tOR: "or" >
| 	< tNOT: "not" >
| 	< tPRINCIPIO : "principio" > { System.out.println("Principio reconocido"); } 
| 	< tFIN: "fin" > { System.out.println("Fin reconocido"); }
| 	< tSI: "si" >
| 	< tENT: "ent" >
| 	< tSI_NO : "si_no" >
| 	< tFSI: "fsi" >
| 	< tMQ: "mq" >
| 	< tFMQ: "fmq" >
| 	< tESCRIBIR : "escribir" >
| 	< tLEER: "leer" >
| 	< tMOD: "mod" >
| 	< tDIV: "div" >
| 	< tENTERO: "entero" >
| 	< tBOOLEANO: "booleano" >
| 	< tCARACTER : "caracter" >
| 	< tTRUE: "true" >
| 	< tFALSE: "false" >
| 	< tENTACAR: "entacar" >
| 	< tCARAENT: "caraent" >
| 	< tACCION: "accion" >
| 	< tVAL : "val" >
| 	< tREF: "ref" >
| 	< tMAYOR: ">" >
| 	< tMENOR: "<" >
| 	< tIGUAL: "=" >
| 	< tMAI: ">=" >
| 	< tMEI : "<=" >
| 	< tNI: "<>" >
| 	< tOPAS: ":=" >
}

TOKEN :   /* Digits */
{
  < tCONSTENTERA : (< DIGIT >)+ >
| < tREAL : (< DIGIT >)+ "." (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}


TOKEN : {
 < tIDENTIFICADOR: <LETTER> ((<LETTER> | <DIGIT>)* (["A"-"Z","a"-"z","0"-"9"]) )? >
| < #LETTER: ["A"-"Z","_","a"-"z"] >
| < tCONSTCHAR : "\'"  (~["\'","\\","\n","\r"] |  "\\" ["n","t","b","r","f","\\","\'","\""])*  "\'" >
| < tCONSTCAD  : "\""  (~["\'","\\","\n","\r"] |  "\\" ["n","t","b","r","f","\\","\'","\""])*  "\"" >
}

void programa() : 
{}
{
	<tPROGRAMA> <tIDENTIFICADOR> ";"
	declaracion_variables() declaracion_acciones()
	bloque_sentencias()
}

void declaracion_variables() : 
{}
{
    (declaracion() ";")*
}


void declaracion() : 
{}
{
    tipo_variables() identificadores()
}

void tipo_variables() : 
{}
{
    < tENTERO >
|   < tCARACTER >
|   < tBOOLEANO >
}

void identificadores() : 
{}
{
    < tIDENTIFICADOR > ( "," < tIDENTIFICADOR> )*
}
/***************************************************************************************************
***************************************************************************************************/
/* ******* Acciones *****/
void declaracion_acciones() : 
{}
{
    ( declaracion_accion() )*
}


void declaracion_accion() : 
{}
{
    cabecera_accion() ";"
	declaracion_variables() 
	declaracion_acciones() 
	bloque_sentencias()
}


void cabecera_accion() : 
{}
{
    < tACCION > < tIDENTIFICADOR > parametros_formales() 
}


void parametros_formales() : 
{}
{
	( "(" parametros() ")")?
}

void lista_parametros() : 
{}
{
    identificadores() ( ";" parametros())?
}

void parametros() : 
{}
{
    clase_parametros() tipo_variables() lista_parametros()
}

void clase_parametros() : 
{}
{
    < tVAL >
 |  < tREF >
}

/***************************************************************************************************
***************************************************************************************************/
/* ******* Sentencias *****/

void bloque_sentencias() : 
{}
{
    < tPRINCIPIO > lista_sentencias() < tFIN >
}

void lista_sentencias() : 
{}
{
    ( sentencia() )*
}


void sentencia() : 
{}
{
  < tIDENTIFICADOR >
 [ 
	   asignacion()
	 | invocacion_accion()
 ]
| mientras_que()
}


void asignacion() : 
{}
{
     < tOPAS > expresion() ";"
}

void invocacion_accion() :
{}
{
	 argumentos() ";"
}

void mientras_que() :
{}
{
   <tMQ> expresion() lista_sentencias() <tFMQ>
}




void argumentos() : 
{}
{
    ( "(" (lista_expresiones())? ")")?
}

void lista_expresiones() : 
{}
{
    expresion() ( "," expresion())*
   
}

void expresion() : 
{}
{
	termino() ( operador_aditivo() termino())*
}

void expresion_simple() : 
{}
{
	factor()   
}

void operador_relacional() : 
{}
{
    	< tMAYOR >
  | 	< tMENOR >
  | 	< tIGUAL >
  | 	< tMAI >
  | 	< tMEI  >
  | 	< tNI >
}

void operador_aditivo() : 
{}
{
    "+" | "-" | < tOR >
}

void operador_multiplicativo() : 
{}
{
    "*" | < tDIV > |  < tMOD > | < tAND > 
}

void termino() : 
{}
{
    factor() ( ( operador_multiplicativo() | operador_relacional() ) factor())*
}

void factor() : 
{}
{
    "-" factor()
 |  < tNOT > factor()
 |  "(" expresion() ")"
 |  < tENTACAR > "(" expresion() ")"
 |  < tCARAENT > "(" expresion() ")"
 |  < tIDENTIFICADOR >
 |  < tCONSTCHAR >
 |  < tCONSTCAD >
 |  < tCONSTENTERA >
 |  < tTRUE >
 |  < tFALSE >
}
