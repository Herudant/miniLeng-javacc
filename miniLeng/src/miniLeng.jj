/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(miniLeng)

import java.io.*;
import miniLeng.Simbolo;
import miniLeng.Tabla_simbolos;
import miniLeng.Globals;




public class miniLeng
{
  
  static Tabla_simbolos tabla;
  public static void main(String args []) throws ParseException
  {
    
      BufferedReader new_buffer = new BufferedReader(new InputStreamReader(System.in));
	  String file;
	  miniLeng parser;
	  Globals variables = new Globals();
	  
	  System.out.println("Ruta y nombre del fichero:");
	 /* 
	  try
	  {
	    file=new_buffer.readLine();
	  }catch(IOException e) {
	    System.out.println("Error al leer la cadena");
	    return;
	  }
	  */
	  file = "/Users/heru/git/miniLeng-javacc/miniLeng/src/pruebas.txt";
	  System.out.println(file);
	  
	  try {
	    parser = new miniLeng(new FileInputStream(file));
	  }
	  catch(FileNotFoundException e) {
	    System.out.println("Fallo al leer el fichero");
	    return;
	  }

	  //tabla.inicializar_tabla();
	  try {
	    parser.programa_completo(variables);
	  }
	  catch (Error e) {
	    	int linea = token.beginLine;
	    int columna = token.beginColumn;
	    String simbolo = token.image;
	    System.out.println("ERROR LÉXICO (<" + linea + ", " + columna + ">): símbolo no reconocido: <" + simbolo + ">");
	    System.out.println("Oops.");
	    System.out.println(e.getMessage());
	  }

	  int x = 3+2;
	 /* 

		Tabla_simbolos t = new g.t_simbolos();
		//tabla.inicializar_tabla();

		tabla.introducir_programa("pepe", 0);

		Simbolo esta = g.t.buscar_simbolo("pepe");

		Simbolo esta2 = g.t.buscar_simbolo("pepa");

		Simbolo s1 = g.t.introducir_variable("a",Simbolo.TipoVariable.ENTERO, 0, 0);
		Simbolo s2 = g.t.introducir_variable("a",Simbolo.TipoVariable.ENTERO, 1, 0);
		Simbolo s3 = g.t.introducir_variable("a",Simbolo.TipoVariable.ENTERO, 0, 0);
		Simbolo s4 = g.t.introducir_variable("b",Simbolo.TipoVariable.ENTERO, 0, 0);
		
		tabla.eliminar_variables(1);
		tabla.eliminar_variables(0);
		tabla.eliminar_programa();
		


		int x = 3+2;
	*/
  }
  /********** Tratamiento Errores **********************/
  public static void tratarErrorSintactico(int line, int column, String msg_error) {
	System.out.println("ERROR SINTACTICO (<" + line + ", " + column + ">): Simbolo encontrado \"" + msg_error + "\"");
  }
  public static void errorSemantico(String msg_error) {
	System.out.println(msg_error);
  }

}

  
PARSER_END(miniLeng)


void programa_completo(Globals g):
{}
{
  programa(g) < EOF >
}


/*  programa ::= < tPROGRAMA > <tIDENTIFICADOR > ";"
					declaracion_variables
					declaracion_acciones
					bloque_sentencias             */
void programa(Globals g) : 
{ Token t1, t2 = null; }
{
  try { 
	<tPROGRAMA> t1 = <tIDENTIFICADOR> ";"
	{
	  //TODO: Comprobar que no existe otro programa
	  g.t.introducir_programa(t1.image, 0);
	}
	declaracion_variables(g) declaracion_acciones(g)
	bloque_sentencias(g)
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());    
  }
}


/* declaracion_variables ::= (declaracion ";")* */
void declaracion_variables(Globals g) : 
{}
{
  try { 
    (declaracion(g) ";")*
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());      
  }
}


/* declaracion ::= tipo_variables identificadores */
void declaracion(Globals g) : 
{Simbolo.TipoVariable tipoVar;}
{
  try { 
    tipoVar = tipo_variables(g) identificadores(g, tipoVar)
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());       
  }
}

/* tipo_variables ::= < tENTERO > | < tCARACTER > | < tBOOLEANO > */
Simbolo.TipoVariable tipo_variables(Globals g) : 
{}
{
  try { 
    < tENTERO >    { return Simbolo.TipoVariable.ENTERO; }
|   < tCARACTER >  { return Simbolo.TipoVariable.CARACTER; }
|   < tBOOLEANO >  { return Simbolo.TipoVariable.BOOLEANO; }
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());     
  }
}


/* identificadores ::= < tIDENTIFICADOR > ( "," < tIDENTIFICADOR >)* */
void identificadores(Globals g, Simbolo.TipoVariable tipoVar) : 
{ Token t1,t2; }
{
  try { 
    t1 = < tIDENTIFICADOR >
	{
		if ( g.t.buscar_simbolo(t1.image) != null) 
		    miniLeng.errorSemantico("Identificador duplicado");
		else 
			g.t.introducir_variable(t1.image, tipoVar, g.nivel, g.dir);
	}
     ( "," < tIDENTIFICADOR> )*
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());       
  }
}

/***************************************************************************************************
***************************************************************************************************/
/* ******* Acciones *****/

/* declaracion_acciones ::= (declaracion_accion)* */
void declaracion_acciones(Globals g) : 
{}
{
  try { 
    ( declaracion_accion(g) )*
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());       
  }
}


/* declaracion_accion ::= cabecera_accion ";"
							declaracion_variables
							declarracion_acciones
							bloque sentencias	*/
void declaracion_accion(Globals g) : 
{}
{
  try { 
    cabecera_accion(g) ";"
	declaracion_variables(g) 
	declaracion_acciones(g) 
	bloque_sentencias(g)
	{
	  //Eliminamos variables del bloque y bajamos un nivel
	  g.t.eliminar_varialbes(g.nivel);
	  g.t.eliminar_acciones(g.nivel);
	  g.t.eliminar_parametros_ocultos(g.nivel+1);
	  g.nivel--;
	}
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());  
  }
}

/* cabecera_accion ::= < tACCION > < tIDENTIFICADOR > parametros_formales */
void cabecera_accion(Globals g) : 
{
  Token t1;
  Simbolo s;
  boolean ok=false;
  List<Simbolo> parametros;
 }
{
  try { 
    < tACCION >
    t1 = < tIDENTIFICADOR >
	{
	  //Introduce en la tabla la accion
		s = g.t.buscar_simbolo(t1.image, g.nivel);
		if ( s==null ) {
			// No existe el simbolo y lo añado
			g.t.introducir_accion(t1.image,g.nivel,g.dir);
			ok = true;
		}
		else {
		  	// Existe el simbolo en el mismo nivel
			miniLeng.errorSemantico("Identificador duplicado");
		}
		g.nivel++;
	}

   parametros_formales(g, ok)
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());    
  }
}

/* parametros_formales ::= ( "(" parametros ")")? */
void parametros_formales(Globals g, booleano ok) : 
{}
{
  try { 
	( "(" parametros(g, ok) ")")?
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());  
  }
}

/* lista_parametros ::= identificadores (";" paraemtros)? */
void lista_parametros(Globals g, Simbolo.TipoVariable tipoVar) : 
{}
{
  try { 
    identificadores(g, tipoVar) ( ";" parametros(g))?
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());    
  }
}

/* parametros ::= clase_parametros tipo_variables lista_parametros */
void parametros(Globals g, booleano ok) : 
{ Simbolo.TipoVariable tipoVar; }
{
  try { 
    clase_parametros(g) tipoVar = tipo_variables(g) lista_parametros(g, tipoVar)
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());     
  }
}


/* clase_parametros ::= < tVAL > | < tREF > */
void clase_parametros(Globals g) : 
{}
{
  try { 
    < tVAL >
 |  < tREF >
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());     
  }
}

/***************************************************************************************************
***************************************************************************************************/
/* ******* Sentencias *****/


/* bloque_sentencias ::= < tPRINCIPIO > lista_sentencias < tFIN > */
void bloque_sentencias(Globals g) : 
{}
{
  try { 
    < tPRINCIPIO > lista_sentencias(g) < tFIN >
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());      
  }
}


/* lista_sentencias ::= ( sentencia )* */
void lista_sentencias(Globals g) : 
{}
{
  try { 
    ( sentencia(g) )*
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());    
  }
}

/* sentencia ::= asignacion | invoacion_accion | mientras_que | leer | escribir | selecion */
void sentencia(Globals g) : 
{}
{
  try { 
	  < tIDENTIFICADOR >
	 [ 
		   asignacion(g)
		 | invocacion_accion(g)
	 ]
	| mientras_que(g)
	| leer(g) ";"
	| escribir(g) ";"
	| seleccion(g)
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());     
  }
}

/* asignacion ::= < tOPAS > expresion ";" */
void asignacion(Globals g) : 
{}
{
  try { 
     < tOPAS > expresion(g) ";"
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());  
  }
}

/* invocacion_accion ::= argumentos ";" */
void invocacion_accion(Globals g) :
{}
{
  try { 
	 argumentos(g) ";"
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());      
  }
}

/* mientras_que ::= < tMQ > expresion lista_sentencias < tFMQ > */
void mientras_que(Globals g) :
{}
{
  try { 
   < tMQ > expresion(g) lista_sentencias(g) < tFMQ >
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());    
  }
}

/* seleccion ::= < tSI > expresion < tENT > lista_sentencias ( < tSI_NO > lista_sentencias )* < tFSI > */
void seleccion(Globals g) :
{}
{
  try { 
	< tSI > expresion(g) < tENT > lista_sentencias(g) (< tSI_NO > lista_sentencias(g))*< tFSI >
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage()); 
  }
}

/* leer ::= < tLEER > "(" lista_asinables ")" */
void leer(Globals g) :
{}
{
  try { 
   <tLEER> "(" lista_asignables(g) ")"
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());    
  }
}

/* escribir ::= < tESCRIBIR > "(" lista_escribibles ")" */
void escribir(Globals g) :
{}
{
  try { 
   <tESCRIBIR> "(" lista_escribibles(g) ")"
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());     
  }
}

/* lista_asinables ::= identificadores */
void lista_asignables(Globals g) :
{}
{
  try { 
  	< tIDENTIFICADOR> ( "," < tIDENTIFICADOR> )*
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());      
  }
}

/* lista_escribibles ::= (< tCONSTCAD > | < tCONSTCHAR >) ( "," (< tIDENTIFICADOR >  |  < tENTACAR > "(" expresion ")" ) )* */
void lista_escribibles(Globals g) : 
{}
{
  try { 
  (< tCONSTCAD > | < tCONSTCHAR >) ( "," (< tIDENTIFICADOR >  |  < tENTACAR > "(" expresion(g) ")" ) )*
  }
  catch (Exception e) {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());     
  }
}



/* argumentos ::= ( "(" lista_expresiones ")" )? */
void argumentos(Globals g) : 
{}
{
  try { 
    ( "(" lista_expresiones(g) ")")?
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());    
  }
}

/* lista_expresiones ::= expresion ( "," expresion)* */
void lista_expresiones(Globals g) : 
{}
{
  try { 
    expresion(g) ( "," expresion(g))*
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());     
  }
}

/* expresion ::= expresion_simple | (operador_relacional expresion_simple)* */
void expresion(Globals g) : 
{}
{
  try { 
	expresion_simple(g)
	 (operador_relacional(g) expresion_simple(g))*
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());       
  }
}

/* expresion_simple ::= termino (operador_aditivo termino)* */
void expresion_simple(Globals g) : 
{}
{
  try { 
	termino(g) ( operador_aditivo(g) termino(g))*
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());      
  }
}


void operador_relacional(Globals g) : 
{}
{
  try { 
    	< tMAYOR >
  | 	< tMENOR >
  | 	< tIGUAL >
  | 	< tMAI >
  | 	< tMEI  >
  | 	< tNI >
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());      
  }
}


void operador_aditivo(Globals g) : 
{}
{
  try { 
    "+" | "-" | < tOR >
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());     
  }
}

void operador_multiplicativo(Globals g) : 
{}
{
  try { 
    "*" | < tDIV > |  < tMOD > | < tAND >
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());      
  }
}

/* termino ::= factor (operador multiplicativo factor)* */
void termino(Globals g) : 
{}
{
  try { 
    factor(g) (operador_multiplicativo(g)  factor(g))*
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());   
  }
}


void factor(Globals g) : 
{}
{
  try { 
    "-" factor(g)
 |  < tNOT > factor(g)
 |  "(" expresion(g) ")"
 |  < tENTACAR > "(" expresion(g) ")"
 |  < tCARAENT > "(" expresion(g) ")"
 |  < tIDENTIFICADOR >
 |  < tCONSTCHAR >
 |  < tCONSTCAD >
 |  < tCONSTENTERA >
 |  < tTRUE >
 |  < tFALSE >
  }
  catch (Exception e)
  {
	miniLeng.tratarErrorSintactico(token.next.beginLine, token.next.beginColumn, token.next.image);
	System.out.println(e.getMessage());   
  }
}


SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| "%" : COMMENT 
}

< COMMENT > SKIP :
{
  "\n" : DEFAULT
}

<COMMENT> MORE : {
	<~[]>
}

TOKEN : /*  Reservadas */
{
	< tPROGRAMA : "programa" > { System.out.println("tPROGRAMA reconocido"); }
| 	< tVAR : "var" >
| 	< tAND: "and" >
| 	< tOR: "or" >
| 	< tNOT: "not" >
| 	< tPRINCIPIO : "principio" > { System.out.println("Principio reconocido"); } 
| 	< tFIN: "fin" > { System.out.println("Fin reconocido"); }
| 	< tSI: "si" >
| 	< tENT: "ent" >
| 	< tSI_NO : "si_no" >
| 	< tFSI: "fsi" >
| 	< tMQ: "mq" >
| 	< tFMQ: "fmq" >
| 	< tESCRIBIR : "escribir" >
| 	< tLEER: "leer" >
| 	< tMOD: "mod" >
| 	< tDIV: "div" >
| 	< tENTERO: "entero" >
| 	< tBOOLEANO: "booleano" >
| 	< tCARACTER : "caracter" >
| 	< tTRUE: "true" >
| 	< tFALSE: "false" >
| 	< tENTACAR: "entacar" >
| 	< tCARAENT: "caraent" >
| 	< tACCION: "accion" >
| 	< tVAL : "val" >
| 	< tREF: "ref" >
| 	< tMAYOR: ">" >
| 	< tMENOR: "<" >
| 	< tIGUAL: "=" >
| 	< tMAI: ">=" >
| 	< tMEI : "<=" >
| 	< tNI: "<>" >
| 	< tOPAS: ":=" >
}

TOKEN :   /* Digits */
{
  < tCONSTENTERA : (< DIGIT >)+ >
| < tREAL : (< DIGIT >)+ "." (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}


TOKEN : {
 < tIDENTIFICADOR: <LETTER> ((<LETTER> | <DIGIT>)* (["A"-"Z","a"-"z","0"-"9"]) )? >
| < #LETTER: ["A"-"Z","_","a"-"z"] >
| < tCONSTCHAR : "\'"  (~["\'","\\","\n","\r"] |  "\\" ["n","t","b","r","f","\\","\'","\""])*  "\'" >
| < tCONSTCAD  : "\""  (~["\'","\\","\n","\r"] |  "\\" ["n","t","b","r","f","\\","\'","\""])*  "\"" >
}


